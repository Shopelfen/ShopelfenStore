default:
  image: node:18-bullseye

stages:
  - analyze
  - build
  - release

variables:
  EXTENSION_NAME: "ShopelfenStore"
  GIT_DEPTH: 0
.before_shopware:
  before_script:
    - apt-get update && apt-get install -y curl unzip jq git
    - curl -L https://github.com/shopware/shopware-cli/releases/download/0.6.12/shopware-cli_0.6.12_linux_amd64.deb -o shopware-cli.deb
    - dpkg -i shopware-cli.deb

sonarqube-check:
  stage: analyze
  image: 
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script: 
    - sonar-scanner
  allow_failure: true
  only:
    - main

build_zip:
  extends: .before_shopware
  needs: [sonarqube-check]
  stage: build
  script:
    - NODE_OPTIONS=--openssl-legacy-provider shopware-cli extension zip --git-commit $CI_COMMIT_SHA . --release
    - mv ${EXTENSION_NAME}-${CI_COMMIT_SHA}.zip ${EXTENSION_NAME}.zip
    - echo "BUILD_JOB_ID=$CI_JOB_ID" > build_job_info.env
  artifacts:
    paths:
      - ${EXTENSION_NAME}.zip
    reports:
      dotenv: build_job_info.env
    expire_in: 1 week


validate:
  extends: .before_shopware
  stage: build
  needs: [build_zip]
  script:
    - unzip ${EXTENSION_NAME}.zip -d ./unpacked
    - shopware-cli extension validate ./unpacked/${EXTENSION_NAME}
    - shopware-cli extension get-changelog ./unpacked/${EXTENSION_NAME} --language en-GB > changelog.txt
  artifacts:
    paths:
      - changelog.txt
    expire_in: 1 week

release:
  extends: .before_shopware
  stage: release
  needs:
  - job: validate
  - job: build_zip
    artifacts: true
  script:
    - export EXTENSION_VERSION=$(jq -r ".version" composer.json)
    - |
      if git rev-parse "v$EXTENSION_VERSION" >/dev/null 2>&1; then
        echo "Tag v$EXTENSION_VERSION already exists. Skipping release."
        exit 0
      fi
    - git config user.name "GitLab CI"
    - git config user.email "ci@hexamain.de"
    - git tag "v$EXTENSION_VERSION"
    - git remote set-url origin "https://gitlab-ci-token:${GITLAB_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git"
    - git push origin "v$EXTENSION_VERSION"
    - |
      curl --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
           --data-urlencode "name=$EXTENSION_NAME v$EXTENSION_VERSION" \
           --data-urlencode "tag_name=v$EXTENSION_VERSION" \
           --data-urlencode "description=$(cat changelog.txt)" \
           --data-urlencode "assets[links][][name]=Download ZIP" \
           --data-urlencode "assets[links][][url]=$CI_PROJECT_URL/-/jobs/$BUILD_JOB_ID/artifacts/raw/${EXTENSION_NAME}.zip" \
           "$CI_API_V4_URL/projects/$CI_PROJECT_ID/releases"

sync_to_github:
  stage: release
  needs: ["release"]
  script:
    - |
      git config --global user.name "GitLab CI"
      git config --global user.email "ci@hexamain.de"
      git checkout -B squash-temp
      TREE_HASH=$(git commit-tree HEAD^{tree} -m "feat: snapshot sync from GitLab")
      git reset --soft "$TREE_HASH"
      git remote remove github || true
      git remote add github "https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com/${GITHUB_REPO}.git"
      git push github HEAD:main --force